name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'

jobs:
  # CodeQL security analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Install Next.js dependencies
        working-directory: ./bmi-calc-nextjs
        run: npm ci

      - name: Build Next.js application
        working-directory: ./bmi-calc-nextjs
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Dependency vulnerability scan
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Install Next.js dependencies
        working-directory: ./bmi-calc-nextjs
        run: npm ci

      - name: Run npm audit for root project
        run: |
          echo "Scanning root project dependencies..."
          npm audit --audit-level=moderate --json > audit-root.json || true
          if [ -s audit-root.json ]; then
            echo "Vulnerabilities found in root project:"
            cat audit-root.json
          else
            echo "No vulnerabilities found in root project"
          fi

      - name: Run npm audit for Next.js project
        working-directory: ./bmi-calc-nextjs
        run: |
          echo "Scanning Next.js project dependencies..."
          npm audit --audit-level=moderate --json > audit-nextjs.json || true
          if [ -s audit-nextjs.json ]; then
            echo "Vulnerabilities found in Next.js project:"
            cat audit-nextjs.json
          else
            echo "No vulnerabilities found in Next.js project"
          fi

      - name: Check for outdated packages
        run: |
          echo "Checking for outdated packages..."
          npm outdated || true
          cd bmi-calc-nextjs && npm outdated || true

  # Secret scanning
  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for potential hardcoded secrets..."
          
          # Check for common secret patterns
          if grep -r -i "api[_-]?key" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md" | grep -v "// " | grep -v "console.log"; then
            echo "Warning: Potential API key found"
          fi
          
          if grep -r -i "secret[_-]?key" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md" | grep -v "// " | grep -v "console.log"; then
            echo "Warning: Potential secret key found"
          fi
          
          if grep -r -i "password" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md" | grep -v "// " | grep -v "console.log" | grep -v "password.*input"; then
            echo "Warning: Potential password found"
          fi
          
          if grep -r -i "token" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md" | grep -v "// " | grep -v "console.log"; then
            echo "Warning: Potential token found"
          fi

  # License compliance check
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Install Next.js dependencies
        working-directory: ./bmi-calc-nextjs
        run: npm ci

      - name: Check licenses for root project
        run: |
          echo "Checking licenses for root project..."
          npm ls --depth=0 --json > licenses-root.json
          echo "Root project dependencies:"
          cat licenses-root.json

      - name: Check licenses for Next.js project
        working-directory: ./bmi-calc-nextjs
        run: |
          echo "Checking licenses for Next.js project..."
          npm ls --depth=0 --json > licenses-nextjs.json
          echo "Next.js project dependencies:"
          cat licenses-nextjs.json

      - name: Check for problematic licenses
        run: |
          echo "Checking for potentially problematic licenses..."
          # Check for GPL licenses (which might require source code disclosure)
          if grep -r -i "gpl" . --include="package*.json" --exclude-dir=node_modules; then
            echo "Warning: GPL licensed packages found - review license compatibility"
          fi
          
          if grep -r -i "agpl" . --include="package*.json" --exclude-dir=node_modules; then
            echo "Warning: AGPL licensed packages found - review license compatibility"
          fi

  # Container security (if using Docker)
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: false  # Enable if you add Docker support
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          if [ -f "Dockerfile" ]; then
            docker build -t bmi-calc:latest .
          else
            echo "No Dockerfile found, skipping container security scan"
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bmi-calc:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Security headers check
  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Install Next.js dependencies
        working-directory: ./bmi-calc-nextjs
        run: npm ci

      - name: Build Next.js application
        working-directory: ./bmi-calc-nextjs
        run: npm run build

      - name: Start Next.js server
        working-directory: ./bmi-calc-nextjs
        run: |
          npm start &
          sleep 10

      - name: Check security headers
        run: |
          echo "Checking security headers..."
          response=$(curl -I http://localhost:3000 2>/dev/null)
          
          # Check for important security headers
          if echo "$response" | grep -i "x-content-type-options"; then
            echo "✅ X-Content-Type-Options header present"
          else
            echo "❌ X-Content-Type-Options header missing"
          fi
          
          if echo "$response" | grep -i "x-frame-options"; then
            echo "✅ X-Frame-Options header present"
          else
            echo "❌ X-Frame-Options header missing"
          fi
          
          if echo "$response" | grep -i "x-xss-protection"; then
            echo "✅ X-XSS-Protection header present"
          else
            echo "❌ X-XSS-Protection header missing"
          fi
          
          if echo "$response" | grep -i "strict-transport-security"; then
            echo "✅ Strict-Transport-Security header present"
          else
            echo "❌ Strict-Transport-Security header missing"
          fi

  # Generate security report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, secret-scan, license-check, security-headers]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "## Scan Results" >> security-report.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- License Check: ${{ needs.license-check.result }}" >> security-report.md
          echo "- Security Headers: ${{ needs.security-headers.result }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Recommendations" >> security-report.md
          echo "1. Review any failed security checks above" >> security-report.md
          echo "2. Update dependencies with known vulnerabilities" >> security-report.md
          echo "3. Implement missing security headers" >> security-report.md
          echo "4. Remove any hardcoded secrets" >> security-report.md
          
          cat security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
